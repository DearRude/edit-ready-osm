name: Manual OSM Website Migration Test and Image Push

on:
  workflow_dispatch: # Allows manual triggering from the Actions tab

permissions:
  contents: read      # Needed by some setup actions or if checking out code
  packages: write     # To push Docker image to GHCR

jobs:
  migrate_and_test:
    runs-on: ubuntu-latest
    services:
      # Start a PostGIS container service
      postgres:
        image: postgis/postgis:16-3.4 
        env:
          POSTGRES_DB: openstreetmap_test # We'll use this for both dev and test envs
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: password
        options: >-                      # Wait for DB to be healthy
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Harden Runner # Basic security hardening
        uses: step-security/harden-runner@v2.9.0 
        with:
          egress-policy: audit

      # Optional: If you need files from the repo where this workflow lives
      # - name: Checkout code
      #   uses: actions/checkout@v4 # Using v4 tag

      - name: Set up Ruby and Bundler Cache
        uses: ruby/setup-ruby@v1 
        with:
          ruby-version: '3.2' # Specify Ruby version (check .ruby-version in osm-website)
          bundler-cache: true # Cache gems based on Gemfile.lock

      - name: Install System Dependencies (Git, Postgres Client)
        run: |
          sudo apt-get update -y && sudo apt-get install -y --no-install-recommends \
            git \
            postgresql-client \
            libpq-dev

      - name: Clone OpenStreetMap Website
        run: git clone --depth=1 https://github.com/openstreetmap/openstreetmap-website.git

      - name: Create database.yml for Service Container
        working-directory: ./openstreetmap-website 
        run: |
          echo "Creating config/database.yml pointing to the service container..."
          # Use cat with a heredoc (<<EOF) to write the multi-line configuration file.
          # Indentation within the heredoc is important for YAML validity.
          cat <<EOF > config/database.yml
          # Generated by GitHub Actions - DO NOT EDIT MANUALLY IN REPO if using this action
          development:
            adapter: postgresql
            encoding: utf8
            database: openstreetmap_test # Use the DB defined in the service env
            username: runner             # Use the user defined in the service env
            password: password           # Use the password defined in the service env
            host: postgres             # Use the service hostname ('postgres')

          test:
            adapter: postgresql
            encoding: utf8
            database: openstreetmap_test # Use the same DB for simplicity
            username: runner
            password: password
            host: postgres

          # Minimal production block, won't be used by this workflow's migrate/test steps
          production:
            adapter: postgresql
            database: osm_production_placeholder
            encoding: utf8
          EOF

          echo "--- Generated config/database.yml ---"
          cat config/database.yml # Print the generated file content to the log for verification
          echo "-------------------------------------"

      - name: Install Ruby Dependencies
        working-directory: ./openstreetmap-website
        # Relies on bundler-cache from setup-ruby step
        run: bundle check || bundle install --jobs 4 --retry 3

      - name: Wait for Service DNS and Port
        run: |
          echo "Waiting for postgres service DNS and port..."
          # Loop until DNS resolves and port is connectable
          count=0
          while ! nc -zv postgres 5432 && [ $count -lt 15 ]; do
            echo "Postgres service not ready yet (DNS or Port 5432)... attempt: $((count+1))/15"
            sleep 2 # Wait 2 seconds before retrying
            count=$((count+1))
          done

          if [ $count -eq 15 ]; then
            echo "Timed out waiting for postgres service!"
            echo "--- Attempting DNS lookup ---"
            nslookup postgres || echo "nslookup failed"
            dig postgres || echo "dig failed"
            getent hosts postgres || echo "getent failed"
            echo "--- Checking port again ---"
            nc -zv postgres 5432 || echo "Netcat check still failing"
            exit 1
          fi
          echo "Postgres service DNS resolved and port 5432 is open."

      - name: Run Database Migrations
        working-directory: ./openstreetmap-website
        # Assumes `rails db:migrate` runs in 'development' env by default, using the config created above.
        run: bundle exec rails db:migrate

      - name: Run Tests
        working-directory: ./openstreetmap-website
        env:
          RAILS_ENV: test # Ensure tests run against the 'test' db config
        run: bundle exec rails db:test:all

      # --- Docker Image Push Section ---

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3 # Using v3 tag
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Image Tag (Date + Short SHA)
        id: image_tag
        run: echo "tag=$(date +%Y%m%d)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Create Minimal Dockerfile for Base Image
        # Ensure this FROM image EXACTLY matches the service image tag above
        run: echo 'FROM postgis/postgis:16-3.4' > Dockerfile.base

      - name: Build and Push 'Validated' Base Image
        uses: docker/build-push-action@v5 # Using v5 tag
        with:
          context: .
          file: ./Dockerfile.base # Use the dynamically created Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/postgis-osm-validated:${{ steps.image_tag.outputs.tag }}